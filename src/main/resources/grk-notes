Extend either SpringBootServletInitializer or WebInitializer.

How to change port or context path?

If you are using Spring Boot, then you don't have to configure the server properties via Bean initializing.

Instead, if one functionality is available for basic configuration, then it can be set in a "properties" file called application, which should reside under src\main\resources in your application structure. The "properties" file is available in two formats

    .yml

    .properties


Under application.properties
server.port=8080
server.contextPath=/gyan

Spring Boot and multiple external configuration files

Under application.properties

-Dspring.config.location=classpath:job1.properties,classpath:job2.properties
This will add the 2 properties file to the files that are loaded. 

How to deploy Spring boot to Tomcat

https://stackoverflow.com/questions/27904594/spring-boot-war-deployed-to-tomcat

How do I tell Spring Boot which main class to use for the executable jar?

<build>
<plugins>
    <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
            <mainClass>myPackage.HelloWorld</mainClass> 
        </configuration>
    </plugin>
</plugins>    
</build>


How to Add a Servlet Filter in a Spring Boot application?

AbstractDispatcherServletInitializer also provides a convenient way to add Filter instances and have them automatically mapped to the DispatcherServlet:

public class MyWebAppInitializer extends AbstractDispatcherServletInitializer {

    // ...

    @Override
    protected Filter[] getServletFilters() {
        return new Filter[] { new HiddenHttpMethodFilter(), new CharacterEncodingFilter() };
    }

}

Each filter is added with a default name based on its concrete type and automatically mapped to the DispatcherServlet


How to define Servlet filter order of execution in Spring Boot application? 
I have also tried introducing web.xml and converting the executable jar to war file But the application doesn't seem to recognize the web.xml


setOrder(int) method does the job.

@Configuration
@EnableAutoConfiguration
@EnableWebMvc
@ComponentScan
public class Application {

    @Bean
    public FilterRegistrationBean filterRegistrationBean() {
        FilterRegistrationBean registrationBean = new FilterRegistrationBean();
        SecurityFilter securityFilter = new SecurityFilter();
        registrationBean.setFilter(securityFilter);
        registrationBean.setOrder(2);
        return registrationBean;
    }

    @Bean
    public FilterRegistrationBean contextFilterRegistrationBean() {
        FilterRegistrationBean registrationBean = new FilterRegistrationBean();
        RequestContextFilter contextFilter = new RequestContextFilter();
        registrationBean.setFilter(contextFilter);
        registrationBean.setOrder(1);
        return registrationBean;
    }
}


Spring boot running a fully executable JAR is as easy as typing:

$ ./myapp.jar

My question is in this case how to set -D properties, e.g.

-Dspring.profiles.active=test


There are two ways to configure properties like that:

1:

By specifying them in a separate configuration file. Spring Boot will look for a file named like JARfilename.conf 
which should be stored in the same folder like the JAR file. 
There you can add the environment variable JAVA_OPTS:

JAVA_OPTS="-Dpropertykey=propvalue"

2:

Or you can just specify the value for the environment variable in the shell before you execute the application:

JAVA_OPTS="-Dpropertykey=propvalue" ./myapp.jar


Spring Boot - custom 404 page with standalone tomcat?

Newer spring boot versions (1.X.RELEASE) has some refactoring around ServerProperties. See below,

  public class ServerCustomization extends ServerProperties {

  @Override
  public void customize(ConfigurableEmbeddedServletContainer container) {

    super.customize(container);
    container.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND,
            "/jsp/404.jsp"));
    container.addErrorPages(new ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR,
            "/jsp/500.jsp"));
    container.addErrorPages(new ErrorPage("/jsp/error.jsp"));
  }

}

Then define a bean to inject ServerProperies.

@Bean
public ServerProperties getServerProperties() {
    return new ServerCustomization();
}


How to Gracefully shutdown spring-boot application/

https://stackoverflow.com/questions/26547532/how-to-shutdown-a-spring-boot-application-in-a-correct-way

How to enable http server logs in an embedded tomcat server provided by spring boot? 



Try setting below in application.properties

server.tomcat.accessLogEnabled=true
server.tomcat.accessLogPattern=%a asdasd

and look in /tmp/tomcat.<random>.<port>/logs for the output files. Set server.tomcat.basedir property to change the directory.




